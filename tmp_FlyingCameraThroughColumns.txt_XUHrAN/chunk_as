150
)
goal.location = (-
10
,
0
,
15
)
goal.keyframe_insert(data_path=
"location"
, frame=
250
)
# ---------- Add a Turbulence Force Field for Extra Chaos ----------
bpy.ops.
object
.effector_add(
type
=
'TURBULENCE'
, location=(
0
,
0
,
30
))
turbulence = bpy.context.active_object
turbulence.field.strength =
10.0
turbulence.field.size =
5.0
# ---------- Set the Scene Timeline ----------
bpy.context.scene.frame_start =
1
bpy.context.scene.frame_end =
250
# Finished!
How It Works
Object Import & Scaling:
Your tetraorthodrome.obj is imported and scaled down. The original is hidden so that only instanced copies from the particle system are visible.
Cube Emitter & Particle System:
A large cube is created as an emitter, with particles emitted from its volume. Each particle uses your custom object as its instance.
Rotation Settings:
The particle system is set to use rotations based on velocity along the global X axis, with an angular velocity factor of 2.0 to achieve rapid spinning.
Boid Physics:
Boid physics are enabled for the particles, with rules for following, avoiding, and flocking. A moving goal (an empty object) is animated to guide the swarm’s behavior.
Force Field:
A turbulence force field is added to add extra chaotic motion.
Run this script and press
Play
in the timeline. The particles (with your custom object) should now appear at the particle locations, spinning and moving in 3D according to the boid simulation. Adjust parameters as needed to further refine the effect.
Dijiste:
Traceback (most recent call last):
  File "C:\Users\Mechachleopteryx\OneDrive\Documents\GitHub\Centerfuge\boid-plane.blend\Text", line 61, in <module>
AttributeError: 'BoidSettings' object has no attribute 'max_speed'
Error: Python script failed, check the message in the system console
ChatGPT dijo:
Reasoned for 17 seconds
Below is an updated version of your script. In this version, the boid physics settings are accessed via
psettings.boid_settings
and we use attribute checks before setting speed and acceleration values (since your Blender version may not support those attributes). This script imports your custom object, scales it down, and uses it as the instance for a boid-based particle system with rotation and turbulence.
python
Copiar código
import
bpy
import
random
import
math
import
os
# ---------- Clear the Scene ----------
bpy.ops.
object
.select_all(action=
'SELECT'
)
bpy.ops.
object
.delete(use_global=
False
)
# ---------- Import Your Custom Object ----------
# Specify the full path to your .obj file.
obj_path =
r"C:\Users\Mechachleopteryx\OneDrive\Documents\GitHub\Centerfuge\tetraorthodrome.obj"
bpy.ops.import_scene.obj(filepath=obj_path)
# Assume the imported object is among the selected objects.
imported_obj = bpy.context.selected_objects[
0
]
imported_obj.name =
"Tetraorthodrome"
# Scale down the object to make it fit better in the simulation.
imported_obj.scale = (
0.05
,
0.05
