# Animate color shift (over 500 frames)
color_ramp.color_ramp.elements[0].color = [0.1, 0.0, 0.5, 1.0]
color_ramp.color_ramp.elements[0].keyframe_insert(data_path="color", frame=1)
color_ramp.color_ramp.elements[0].color = [0.0, 0.5, 0.2, 1.0]
color_ramp.color_ramp.elements[0].keyframe_insert(data_path="color", frame=250)
color_ramp.color_ramp.elements[0].color = [0.1, 0.0, 0.5, 1.0]
color_ramp.color_ramp.elements[0].keyframe_insert(data_path="color", frame=500)

color_ramp.color_ramp.elements[1].color = [0.8, 0.2, 0.0, 1.0]
color_ramp.color_ramp.elements[1].keyframe_insert(data_path="color", frame=1)
color_ramp.color_ramp.elements[1].color = [0.9, 0.7, 0.0, 1.0]
color_ramp.color_ramp.elements[1].keyframe_insert(data_path="color", frame=250)
color_ramp.color_ramp.elements[1].color = [0.8, 0.2, 0.0, 1.0]
color_ramp.color_ramp.elements[1].keyframe_insert(data_path="color", frame=500)

plane.data.materials.append(mat)

# ---------- Add Displacement for Height Animation ----------
bpy.ops.object.modifier_add(type='DISPLACE')
displace = plane.modifiers[-1]
displace.name = "FractalHeight"

# Create a new texture for displacement
disp_texture = bpy.data.textures.new("NoiseDisp", type='NOISE')
displace.texture = disp_texture

# Create a noise texture node in the material
noise_tex = nodes.new("ShaderNodeTexNoise")
noise_tex.inputs["Scale"].default_value = 0.5
noise_tex.inputs["Detail"].default_value = 16.0
noise_tex.inputs["Roughness"].default_value = 0.6

# Animate displacement (over 500 frames)
displace.strength = 0.5
displace.keyframe_insert(data_path="strength", frame=1)
displace.strength = 1.5
displace.keyframe_insert(data_path="strength", frame=250)
displace.strength = 0.5
displace.keyframe_insert(data_path="strength", frame=500)

# ---------- Add Camera with Flyover Path ----------
# Create a new camera data-block and object manually.
cam_data = bpy.data.cameras.new("FlyoverCamera")
camera = bpy.data.objects.new("FlyoverCamera", cam_data)
bpy.context.collection.objects.link(camera)

camera.location = (25, -25, 20)
camera.rotation_euler = (math.radians(60), 0, math.radians(45))
camera.scale = (2, 2, 2)  # Enlarge the camera icon in the viewport

# Set camera properties
cam_data.lens = 35
cam_data.clip_end = 1000

# Animate camera flyover (over 500 frames)
scene = bpy.context.scene
scene.frame_start = 1
scene.frame_end = 500

camera.location = (25, -25, 20)
camera.keyframe_insert(data_path="location", frame=1)
camera.location = (-25, 25, 15)
camera.keyframe_insert(data_path="location", frame=500)

# ---------- Add Lighting ----------
bpy.ops.object.light_add(type='SUN', location=(0, 0, 50))
light = bpy.context.active_object
light.data.energy = 10

# ---------- Set Render Settings ----------
scene.render.resolution_x = 1920
scene.render.resolution_y = 1080
scene.render.engine = 'BLENDER_EEVEE'
scene.camera = camera  # Set our new camera as the active camera

# Force viewport update and align to camera
bpy.ops.object.select_all(action='DESELECT')
camera.select_set(True)
bpy.context.view_layer.objects.active = camera
bpy.ops.view3d.view_camera()  # Align view to camera
bpy.ops.wm.redraw_timer(type='DRAW_WIN', iterations=1)

print("Setup complete. Press Numpad 0 to view through the camera, then Alt+A to play the animation!")
ChatGPT dijo:
Reasoned for 6 seconds
Below is an updated version of your script that adds a Bright/Contrast node to the material node tree. This lets you darken the overall look and increase the contrast after the ColorRamp. Feel free to tweak the Bright and Contrast values to your liking.
python
Copiar c√≥digo
import
bpy
import
math
# ---------- Clear the Scene ----------
bpy.ops.
object
.select_all(action=
'SELECT'
)
bpy.ops.
object
