goal.keyframe_insert(data_path="location", frame=250)

# ---------- Add a Turbulence Force Field for Extra Chaos ----------
bpy.ops.object.effector_add(type='TURBULENCE', location=(0, 0, 30))
turbulence = bpy.context.active_object
turbulence.field.strength = 10.0
turbulence.field.size = 5.0

# ---------- Set the Scene Timeline ----------
bpy.context.scene.frame_start = 1
bpy.context.scene.frame_end = 250

# Finished!
ChatGPT dijo:
Reasoned for 30 seconds
Below is an updated version of your script. It imports your custom object, scales it down, and then uses it as an instance for a boid-based particle system that emits from a cube volume. The particles have a set rotation mode (using the global X axis) with angular velocity based on their movement. You can adjust the angular velocity factor for faster spinning. Try running this script in Blender’s Scripting workspace:
python
Copiar código
import
bpy
import
random
import
math
import
os
# ---------- Clear the Scene ----------
bpy.ops.
object
.select_all(action=
'SELECT'
)
bpy.ops.
object
.delete(use_global=
False
)
# ---------- Import Your Custom Object ----------
# Specify the full path to your .obj file.
obj_path =
r"C:\Users\Mechachleopteryx\OneDrive\Documents\GitHub\Centerfuge\tetraorthodrome.obj"
bpy.ops.import_scene.obj(filepath=obj_path)
# Assume the imported object is among the selected objects.
imported_obj = bpy.context.selected_objects[
0
]
imported_obj.name =
"Tetraorthodrome"
# Scale down the object to make it fit better in the simulation.
imported_obj.scale = (
0.05
,
0.05
,
0.05
)
# Optionally hide the original so only instanced copies are visible.
imported_obj.hide_viewport =
True
imported_obj.hide_render =
True
# ---------- Create a Cube Emitter for 3D Volume ----------
# This cube will emit particles from its volume.
bpy.ops.mesh.primitive_cube_add(size=
40
, location=(
0
,
0
,
20
))
emitter = bpy.context.active_object
emitter.name =
"Emitter"
# ---------- Add Particle System for Boid Simulation ----------
ps_mod = emitter.modifiers.new(
"BoidSystem"
,
type
=
'PARTICLE_SYSTEM'
)
psys = emitter.particle_systems[-
1
]
psettings = bpy.data.particles.new(name=
"BoidParticles"
)
psys.settings = psettings
# Configure emitter settings.
psettings.
type
=
'EMITTER'
psettings.frame_start =
1
psettings.frame_end =
1
# Emit all particles at once.
