,
0.05
)
# Optionally, hide the original so only instanced copies are visible.
imported_obj.hide_viewport =
True
imported_obj.hide_render =
True
# ---------- Create a Cube Emitter for 3D Volume ----------
# This cube will emit particles from its volume.
bpy.ops.mesh.primitive_cube_add(size=
40
, location=(
0
,
0
,
20
))
emitter = bpy.context.active_object
emitter.name =
"Emitter"
# ---------- Add Particle System for Boid Simulation ----------
ps_mod = emitter.modifiers.new(
"BoidSystem"
,
type
=
'PARTICLE_SYSTEM'
)
psys = emitter.particle_systems[-
1
]
psettings = bpy.data.particles.new(name=
"BoidParticles"
)
psys.settings = psettings
# Configure emitter settings.
psettings.
type
=
'EMITTER'
psettings.frame_start =
1
psettings.frame_end =
1
# Emit all particles at once.
psettings.lifetime =
250
psettings.count =
200
# Adjust the number for more or fewer instances.
psettings.emit_from =
'VOLUME'
# Emit from the entire volume of the cube.
# Use object instancing: your imported object will be instanced for each particle.
psettings.render_type =
'OBJECT'
psettings.instance_object = imported_obj
# Add rotation to particles.
psettings.use_rotations =
True
psettings.rotation_mode =
'GLOB_X'
# Set the rotation mode to global X axis.
psettings.angular_velocity_mode =
'VELOCITY'
# Rotate particles based on their velocity.
psettings.angular_velocity_factor =
2.0
# Adjust the rotation speed.
# ---------- Set Up Boid Physics ----------
psettings.physics_type =
'BOIDS'
# Access boid settings (using boid_settings instead of boids)
boid = psettings.boid_settings

boid.use_flight =
True
# Allow free 3D movement.
# Only set these if they exist in your version of Blender.
if
hasattr
(boid,
"max_speed"
):
    boid.max_speed =
3.0
# Increase speed for a larger space.
if
hasattr
(boid,
"max_acceleration"
):
    boid.max_acceleration =
0.7
# Increase acceleration for dynamic motion.
# Add boid behavior rules.
rule_follow = boid.rules.add()
rule_follow.
