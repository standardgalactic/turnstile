.delete(use_global=
False
)
# ---------- Create a Plane as the Base Landscape ----------
bpy.ops.mesh.primitive_plane_add(size=
50
, location=(
0
,
0
,
0
))
plane = bpy.context.active_object
plane.name =
"FractalPlane"
# Subdivide for detail
bpy.ops.
object
.mode_set(mode=
'EDIT'
)
bpy.ops.mesh.subdivide(number_cuts=
63
)
# 64x64 grid
bpy.ops.
object
.mode_set(mode=
'OBJECT'
)
# ---------- Add Material with Noise-Based Color Animation ----------
mat = bpy.data.materials.new(name=
"FractalMaterial"
)
mat.use_nodes =
True
nodes = mat.node_tree.nodes
links = mat.node_tree.links

nodes.clear()
output = nodes.new(
"ShaderNodeOutputMaterial"
)
diffuse = nodes.new(
"ShaderNodeBsdfDiffuse"
)
color_ramp = nodes.new(
"ShaderNodeValToRGB"
)
noise = nodes.new(
"ShaderNodeTexNoise"
)
mapping = nodes.new(
"ShaderNodeMapping"
)
coords = nodes.new(
"ShaderNodeTexCoord"
)
bright_contrast = nodes.new(
"ShaderNodeBrightContrast"
)
# Set up node links:
links.new(coords.outputs[
"Object"
], mapping.inputs[
"Vector"
])
links.new(mapping.outputs[
"Vector"
], noise.inputs[
"Vector"
])
links.new(noise.outputs[
"Fac"
], color_ramp.inputs[
"Fac"
])
# Insert Bright/Contrast node between the ColorRamp and Diffuse:
links.new(color_ramp.outputs[
"Color"
], bright_contrast.inputs[
"Color"
])
links.new(bright_contrast.outputs[
"Color"
], diffuse.inputs[
"Color"
])
links.new(diffuse.outputs[
"BSDF"
], output.inputs[
"Surface"
])
# Set Noise parameters
noise.inputs[
"Scale"
].default_value =
5.0
noise.inputs[
