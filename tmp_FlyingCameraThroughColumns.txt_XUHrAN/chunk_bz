bpy.ops.view3d.view_camera()
# Align view to camera
bpy.ops.wm.redraw_timer(
type
=
'DRAW_WIN'
, iterations=
1
)
print
(
"Setup complete. Press Numpad 0 to view through the camera, then Alt+A to play the animation!"
)
Explanation
ColorRamp Adjustments:
The ColorRamp now uses cooler colors.
The left element starts as dark blue (0.0, 0.0, 0.5, 1.0) and animates to a cyan (0.0, 0.5, 0.5, 1.0) at frame 250 before reverting.
The right element starts as a bright cyan-green (0.0, 0.8, 0.6, 1.0) and shifts to a slightly different bluish-green (0.0, 0.7, 0.8, 1.0) at frame 250.
Bright/Contrast Node:
The Bright/Contrast node further darkens the overall look and boosts contrast.
Run this updated script in Blender’s Text Editor. Adjust the color values or Bright/Contrast settings as needed until you achieve your desired cool-toned, higher-contrast look.
Dijiste:
No that wrecked it try another way,
ChatGPT dijo:
Reasoned for 24 seconds
Below is an alternative approach that redefines the color ramp entirely with cooler, darker hues without using additional nodes. In this version, the ColorRamp is set up with two stops that are directly tuned to blue–green tones and then animated over 500 frames. You can tweak the exact color values as needed.
python
Copiar código
import
bpy
import
math
# ---------- Clear the Scene ----------
bpy.ops.
object
.select_all(action=
'SELECT'
)
bpy.ops.
object
.delete(use_global=
False
)
# ---------- Create a Plane as the Base Landscape ----------
bpy.ops.mesh.primitive_plane_add(size=
50
, location=(
0
,
0
,
0
))
plane = bpy.context.active_object
plane.name =
"FractalPlane"
# Subdivide for detail (creates a 64x64 grid)
bpy.ops.
object
.mode_set(mode=
'EDIT'
)
bpy.ops.mesh.subdivide(number_cuts=
63
)
bpy.ops.
object
.mode_set(mode=
'OBJECT'
)
# ---------- Add Material with Noise-Based Color Animation ----------
mat = bpy.data.materials.new(name=
"FractalMaterial"
)
mat.use_nodes =
True
nodes = mat.node_tree.nodes
links = mat.node_tree.links

nodes.clear()
output = nodes.new(
"ShaderNodeOutputMaterial"
)
diffuse = nodes.new(
"ShaderNodeBsdfDiffuse"
)
color_ramp = nodes.new(
"ShaderNodeValToRGB"
)
noise = nodes.new(
"ShaderNodeTexNoise"
)
mapping = nodes.new(
"ShaderNodeMapping"
)
coords = nodes.new(
"ShaderNodeTexCoord"
)
# Link nodes
links.new(coords.outputs[
