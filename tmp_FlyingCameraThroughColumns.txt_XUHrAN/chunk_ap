# Finished!
Explanation
Object Import & Scaling:
The script imports your tetraorthodrome.obj from the specified folder, scales it down to 10% of its original size, and hides the original so that only its instanced copies show up.
Cube Emitter & Particle System:
A large cube emitter is created to spawn particles throughout a 3D volume. The particle system is set to use the imported object for instancing, and gravity is disabled so that the particles donâ€™t fall.
Boid Physics:
Boid physics are enabled with flight allowed, and basic rules (follow, avoid, and flock) are added to simulate swarm behavior.
Vortex Force Field:
A vortex force field is added to impart rapid spinning to the particles.
Run this script and press
Play
on the timeline. You should now see many small, rapidly spinning instances of your tetraorthodrome object moving according to the boid simulation. Adjust the scale, particle count, or vortex strength as needed to achieve your desired effect.
Dijiste:
More like this maybe: import bpy
import random
import math
import os

# ---------- Clear the Scene ----------
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# ---------- Import Your Custom Object ----------
# Specify the full path to your .obj file.
obj_path = r"C:\Users\Mechachleopteryx\OneDrive\Documents\GitHub\Centerfuge\tetraorthodrome.obj"
bpy.ops.import_scene.obj(filepath=obj_path)

# Assume the imported object is among the selected objects.
imported_obj = bpy.context.selected_objects[0]
imported_obj.name = "Tetraorthodrome"
# Scale down the object to make it fit better in the simulation.
imported_obj.scale = (0.05, 0.05, 0.05)

# ---------- Create a Cube Emitter for 3D Volume ----------
# This cube will emit particles from its volume.
bpy.ops.mesh.primitive_cube_add(size=40, location=(0, 0, 20))
emitter = bpy.context.active_object
emitter.name = "Emitter"

# ---------- Add Particle System for Boid Simulation ----------
ps_mod = emitter.modifiers.new("BoidSystem", type='PARTICLE_SYSTEM')
psys = emitter.particle_systems[-1]
psettings = bpy.data.particles.new(name="BoidParticles")
psys.settings = psettings

# Configure emitter settings.
psettings.type = 'EMITTER'
psettings.frame_start = 1
psettings.frame_end = 1       # Emit all particles at once.
psettings.lifetime = 250
psettings.count = 200         # Adjust the number for more or fewer instances.
psettings.emit_from = 'VOLUME' # Emit from the entire volume of the cube.

# Use object instancing: your imported object will be instanced for each particle.
psettings.render_type = 'OBJECT'
psettings.instance_object = imported_obj

# Add rotation to particles.
psettings.rotation_mode = 'GLOB_X'  # Set the rotation mode to global X axis.
psettings.angular_velocity_mode = 'VELOCITY'  # Rotate particles based on their velocity.
psettings.angular_velocity_factor = 2.0  # Adjust the rotation speed.

# ---------- Set Up Boid Physics ----------
psettings.physics_type = 'BOIDS'

# Ensure boid settings are accessed correctly.
boid = psettings.boids

boid.use_flight = True         # Allow free 3D movement.
boid.max_speed = 3.0           # Increase speed for a larger space.
boid.max_acceleration = 0.7    # Increase acceleration for dynamic motion.

# Add boid behavior rules.
rule_follow = boid.rules.add()
rule_follow.type = 'FOLLOW'
rule_follow.value = 0.5

rule_avoid = boid.rules.add()
rule_avoid.type = 'AVOID'
rule_avoid.value = 1.0

rule_flock = boid.rules.add()
rule_flock.type = 'FLOCK'
rule_flock.value = 0.8

# ---------- Add a 3D Goal for the Swarm ----------
# Create an empty that serves as a moving target for the boids.
bpy.ops.object.empty_add(type='PLAIN_AXES', location=(-10, -10, 10))
goal = bpy.context.active_object
goal.name = "BoidGoal"
boid.goal_object = goal
boid.use_goal = True
boid.goal_weight = 0.3

# Animate the goal in 3D space to encourage more varied motion.
goal.keyframe_insert(data_path="location", frame=1)
goal.location = (10, 10, 20)
goal.keyframe_insert(data_path="location", frame=150)
goal.location = (-10, 0, 15)
