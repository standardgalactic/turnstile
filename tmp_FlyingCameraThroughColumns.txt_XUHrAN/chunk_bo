10
# ---------- Set Render Settings ----------
scene.render.resolution_x =
1920
scene.render.resolution_y =
1080
scene.render.engine =
'BLENDER_EEVEE'
scene.camera = camera
# Set our new camera as the active camera
# Optional: Force viewport update (ensure you're in a 3D View context)
for
area
in
bpy.context.screen.areas:
if
area.
type
==
'VIEW_3D'
:
for
region
in
area.regions:
if
region.
type
==
'WINDOW'
:
                override = {
'area'
: area,
'region'
: region}
                bpy.ops.view3d.view_camera(override)
break
print
(
"Setup complete. Press Numpad 0 to view through the camera, then Alt+A to play the animation!"
)
Explanation
Displacement Texture:
We now attempt to set the legacy properties (
noise_scale
and
intensity
) using try/except blocks. If they’re not available in Blender 2.93.6, a message is printed, and the script continues using default texture settings.
Camera Creation and Animation:
A new camera is created manually and animated over 500 frames. If the animation still feels too fast, consider increasing the frame range or reducing the scene’s FPS (via render settings).
Run this updated script in Blender’s Text Editor. You should now see your fractal plane with noise-based color and displacement animations along with a flyover camera.
Dijiste:
It's working now, maybe I need higher contrast and more dark though as it is kind of too light: import bpy
import math

# ---------- Clear the Scene ----------
bpy.ops.object.select_all(action='SELECT')
bpy.ops.object.delete(use_global=False)

# ---------- Create a Plane as the Base Landscape ----------
bpy.ops.mesh.primitive_plane_add(size=50, location=(0, 0, 0))
plane = bpy.context.active_object
plane.name = "FractalPlane"

# Subdivide for detail
bpy.ops.object.mode_set(mode='EDIT')
bpy.ops.mesh.subdivide(number_cuts=63)  # 64x64 grid
bpy.ops.object.mode_set(mode='OBJECT')

# ---------- Add Material with Noise-Based Color Animation ----------
mat = bpy.data.materials.new(name="FractalMaterial")
mat.use_nodes = True
nodes = mat.node_tree.nodes
links = mat.node_tree.links

nodes.clear()
output = nodes.new("ShaderNodeOutputMaterial")
diffuse = nodes.new("ShaderNodeBsdfDiffuse")
color_ramp = nodes.new("ShaderNodeValToRGB")
noise = nodes.new("ShaderNodeTexNoise")
mapping = nodes.new("ShaderNodeMapping")
coords = nodes.new("ShaderNodeTexCoord")

links.new(coords.outputs["Object"], mapping.inputs["Vector"])
links.new(mapping.outputs["Vector"], noise.inputs["Vector"])
links.new(noise.outputs["Fac"], color_ramp.inputs["Fac"])
links.new(color_ramp.outputs["Color"], diffuse.inputs["Color"])
links.new(diffuse.outputs["BSDF"], output.inputs["Surface"])

noise.inputs["Scale"].default_value = 5.0
noise.inputs["Detail"].default_value = 16.0
noise.inputs["Roughness"].default_value = 0.6

color_ramp.color_ramp.interpolation = 'B_SPLINE'
color_ramp.color_ramp.elements[0].position = 0.0
color_ramp.color_ramp.elements[0].color = (0.1, 0.0, 0.5, 1.0)  # Dark purple
color_ramp.color_ramp.elements[1].position = 1.0
color_ramp.color_ramp.elements[1].color = (0.8, 0.2, 0.0, 1.0)  # Orange-red

