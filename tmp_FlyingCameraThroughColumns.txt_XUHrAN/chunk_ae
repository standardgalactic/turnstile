0
,
0
,
1
))
emitter = bpy.context.active_object
emitter.name =
"Emitter"
# ---------- Add Particle System for Boid Simulation ----------
ps_mod = emitter.modifiers.new(
"BoidSystem"
,
type
=
'PARTICLE_SYSTEM'
)
psys = emitter.particle_systems[-
1
]
psettings = bpy.data.particles.new(name=
"BoidParticles"
)
psys.settings = psettings
# Set particle system to work as an emitter
psettings.
type
=
'EMITTER'
psettings.frame_start =
1
psettings.frame_end =
1
# Emit all at once
psettings.lifetime =
250
psettings.count =
100
# Number of birds
# Use object instancing: our bird object will be instanced for each particle
psettings.render_type =
'OBJECT'
psettings.instance_object = bird
# ---------- Set Up Boid Physics ----------
psettings.physics_type =
'BOIDS'
boid = psettings.boid_settings
boid.use_flight =
True
# Allow 3D movement
boid.max_speed =
2.0
# Maximum speed
boid.max_acceleration =
0.5
# Maximum acceleration
# Add boid behavior rules to simulate swarm behavior
# (These rules adjust how the boids steer, avoid, and flock together)
# Note: Adjust the weights (value) to get different behaviors.
rule_follow = boid.rules.add()
rule_follow.
type
=
'FOLLOW'
rule_follow.value =
0.5
rule_avoid = boid.rules.add()
rule_avoid.
type
=
'AVOID'
rule_avoid.value =
1.0
rule_flock = boid.rules.add()
rule_flock.
type
=
'FLOCK'
rule_flock.value =
0.8
# ---------- Add a Goal for the Swarm ----------
# Create an empty that serves as a goal or target for the boids.
bpy.ops.
object
.empty_add(
type
=
'PLAIN_AXES'
, location=(
0
, -
5
,
3
))
goal = bpy.context.active_object
goal.name =
"BoidGoal"
boid.goal_object = goal
boid.use_goal =
